# @package _global_

defaults:
  - base
  - override /model: option_retriever
  - override /model/bert: pubmed
  - override /model/module/retriever_head: colbert
  - override /model/module/reader_head: colbert
  - override /model/module/gradients: reinforce # todo!!!!
  - override /datamodule/builder: concat_openqa
  - override /datamodule/index_builder: ${model/module/retriever_head}
  - override /datamodule/sampler: priority # TODO!!!!!
  - override /datamodule/transform: none
  - override /datamodule/relevance_classifier: none
  - override /datamodule/dataset_filter: none
  - override /datamodule/builder/analytics:
      - retriever_accuracy
      - sequence_lengths
      - retriever_distribution
      - log_retrieved_documents
  - override /logger: wandb
  - override /callbacks:
      - checkpoint
      - lr_monitor
      - log_predictions

base:
  seed: 4272019677 # TODO: remove
  target_metric: validation/reader/Accuracy
  target_mode: max
  is_search: false
  exp_info: "Colbert + Bayesian head"
  batch_size: 32
  device_batch_size: 1
  n_devices: ${int_max:1,${trainer.gpus}}
  step_batch_size: ${int_mul:${base.device_batch_size},${base.n_devices}}

trainer:
  gpus: ${n_gpus:}
  strategy: dp
  min_epochs: 1
  max_epochs: 1_000
  gradient_clip_val: 2.0 # as in the Colbert repo
  accumulate_grad_batches: ${int_div:${base.batch_size},${base.step_batch_size}}
  val_check_interval: 0.5
  precision: 16

model:
  ema_decay: null
  num_warmup_steps: 100 # Colbert uses no warmup
  num_training_steps: 10_000
  bert:
    config:
      hidden_dropout_prob: 0.1
      attention_probs_dropout_prob: 0.1
  optimizer: adamw
  use_parameter_groups: false
  optimizer_params:
    lr: 1e-5
    eps: 1e-8 # as in the Colbert repo
  module:
    # use_gate: true # todo
    resample_k: null
    alpha: 0
    max_batch_size: 200
    retriever_head:
      output_size: 64
      use_mask: false # todo
      use_answer_mask: false
      bayesian: true # todo
      learn_temperature: true
      temperature: 1e3
    reader_head:
      output_size: 64
      use_mask: false
      bayesian: false
      learn_temperature: true
      temperature: 1e3
    gradients:
      use_baseline: false # todo
      expr: B
  parameters:
    gamma: 1
    question_mask: 1

datamodule:
  # how often to map the dataset
  dataset_update:
    freq: 15 # todo !!!
    reset_optimizer: true # TODO !!
    index_first_epoch: false
    builder_args:
      relevance_classifier: null

  # dataloader
  train_batch_size: ${base.step_batch_size}
  eval_batch_size: ${int_mul:${datamodule.train_batch_size},4}
  num_workers: 12
  pin_memory: true
  # drop_last: true # TODO: problem with test set!!!!!!!!!!!!!!

  # dataset builder
  use_subset: false
  corpus_subset: false
  num_proc: 8
  output_columns:
    - answer.target
    - question.input_ids
    - question.attention_mask
    - document.input_ids
    - document.attention_mask
    - document.row_idx
    - document.match_score
    - document.retrieval_score
    - document.retrieval_rank

  # documents: retrieval & sampling
  n_retrieved_documents: 1_000 # todo> next exp
  n_documents: 10

  # tag documents as positive or negative
  #  relevance_classifier:
  #    interpretable: false

  # document sampler
  sampler:
    total: ${datamodule.n_documents}
    temperature: 1
    largest:
      train: false
      validation: false # todo
      test: false # todo

  # OpenQA builder parameters
  builder:
    batch_size: 100
    writer_batch_size: 1_000
    dataset_builder:
      dset_name: medqa-us
      query_expansion: null
      n_query_tokens: 10 # todo!!!
      max_length: 512
    corpus_builder:
      use_subset: ${datamodule.corpus_subset}
      passage_length: 200
      passage_stride: 100

  # Index parameters
  index_builder:
    es_temperature: 1. # todo !!!
    model_output_keys: [ _hq_, _hd_ ]
    keep_maxsim_on_cpu: false
    faiss_train_size: 1_000_000
    p: 100
    dtype: float32
    max_chunksize: null
    maxsim_chunksize: 4_000
    persist_cache: false
    faiss_args:
      factory: IVF100,PQ16x8
      metric_type: 0 # == faiss.METRIC_INNER_PRODUCT
      nprobe: 12
    loader_kwargs:
      batch_size: ${int_mul:${base.n_devices},500}
      num_workers: 12
      pin_memory: true


logger:
  wandb:
    group: option-retriever
